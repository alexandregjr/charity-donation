{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Received.js\";\nimport React, { Component } from 'react';\nimport Item from './components/Item';\nimport ResponseType from '../connection/ResponseType';\nimport Connection from '../connection/Connection';\nimport { Redirect } from 'react-router-dom';\n/**\n * Componente do React criado utilizando classes para\n * que possa ter acesso a estados. Possui metodos para \n * renderizar e buscar dados no servidor.\n * O componente Received representa uma pagina que possui\n * uma lista com as doacoes recebidas por um usuario\n *\n * @class Received\n * @extends {Component}\n */\n\nclass Received extends Component {\n  /**\n   * Cria uma instancia de Received, que é um JSX Component\n   * \n   * @param {*} props propriedades passadas para o objeto\n   * @memberof Received\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      content: [],\n      errorMessage: '',\n      error: false\n    };\n    this.setupSocket = this.setupSocket.bind(this);\n    this.setContent = this.setContent.bind(this);\n    this.query = this.query.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  /**\n   * Faz uma request para o servidor enviar todas as \n   * doacoes feitas para o usuario que esta logado\n   *\n   * @memberof Received\n   */\n\n\n  query() {\n    const msg = {\n      id: sessionStorage.getItem('id'),\n      type: ResponseType.DONATIONS_RECEIVED\n    };\n    if (this.socket.readyState === this.socket.OPEN) this.socket.send(JSON.stringify(msg));else setTimeout(this.query, 10);\n  }\n  /**\n   * Muda o estado da pagina, guardando \n   * o conteudo pesquisado no servidor\n   *\n   * @param {Object} content\n   * @memberof Received\n   */\n\n\n  setContent(content) {\n    this.setState({\n      error: false,\n      loading: false,\n      errorConfirm: false,\n      content: JSON.parse(content)\n    });\n  }\n  /**\n   * Realiza a configuracao do WebSocket (conexao Client-Server)\n   * para realizar a comunicacao e receber os dados \n   *\n   * @memberof Received\n   */\n\n\n  setupSocket() {\n    this.socket = Connection;\n\n    this.socket.onmessage = r => {\n      const response = JSON.parse(r.data);\n\n      switch (response.type) {\n        case ResponseType.SUCCESS:\n          switch (response.id) {\n            case -6:\n              this.setContent(response.message);\n              break;\n\n            case -11:\n              this.confirmSuccessful();\n              break;\n\n            default:\n          }\n\n          break;\n\n        case ResponseType.FAIL:\n          switch (response.id) {\n            case -6:\n              this.setError(response.message);\n              break;\n\n            case -11:\n              this.confirmFailed(response.message);\n              break;\n\n            default:\n          }\n\n          break;\n\n        default:\n          this.setState({\n            error: true,\n            errorMessage: 'Erro: Indefinido.'\n          });\n      }\n    };\n  }\n  /**\n   * Muda o estado da pagina para mostrar um erro ocorrido\n   * no carregamento da pagina\n   *\n   * @param {String} error mensagem de erro\n   * @memberof Received\n   */\n\n\n  setError(error) {\n    this.setState({\n      error: true,\n      errorMessage: error\n    });\n  }\n  /**\n   * Muda o estado para mostrar um erro quando falha\n   * ao tentar confirmar o recebimento de algum produto\n   *\n   * @param {*} error mensagem de erro\n   * @memberof Received\n   */\n\n\n  confirmFailed(error) {\n    this.setState({\n      errorConfirm: true,\n      errorMessage: error\n    });\n  }\n  /**\n   * Muda o estado e atualiza a pagina para mostrar \n   * a confirmacao de uma doacao\n   * \n   * @memberof Received\n   */\n\n\n  confirmSuccessful() {\n    this.setState({\n      loading: true\n    });\n    this.query();\n  }\n  /**\n   * Metodo built-in da classe Component que é\n   * chamado sempre que o componente é montado\n   *\n   * @memberof Received\n   */\n\n\n  componentDidMount() {\n    this.setupSocket();\n    this.query();\n  }\n  /**\n   * Envia uma request para o servidor confirmar o recebimento \n   * da doacao selecionada\n   *\n   * @param {*} id id da doacao a ser confirmada\n   * @memberof Received\n   */\n\n\n  validateDonation(id) {\n    if (this.socket.readyState !== this.socket.OPEN) setTimeout(this.validateDonation, 10);\n    const msg = {\n      id: id,\n      type: ResponseType.VALIDATE_DONATION\n    };\n    this.socket.send(JSON.stringify(msg));\n  }\n  /**\n   * Utilizado para gerenciar as submissoes dos \n   * formularios da pagina, realizando a confirmacao\n   * da doacao\n   *\n   * @param {*} event evento de submissao no form\n   * @memberof Received\n   */\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.validateDonation(event.target.name);\n  }\n  /**\n   * Metodo built-in do component react que retorna o componente JSX\n   * a ser renderizado na tela.\n   * Lista todas as doacoes realizadas recebidas usuario, tendo a opçao\n   * de confirmar recebimento.\n   *\n   * @returns JSX Component\n   * @memberof Received\n   */\n\n\n  render() {\n    const content = this.state.content;\n    const donations = content.map((donation, index) => React.createElement(\"form\", {\n      key: index,\n      name: donation.id,\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Item, {\n      data: donation,\n      type: \"received\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), donation.status === 0 ? React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Confirmar recebimento\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Recebimento confirmado\")));\n    return !(sessionStorage.getItem('type') === 'CHARITY') ? React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }) : this.state.error ? React.createElement(\"p\", {\n      className: 'error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, this.state.errorMessage) : this.state.loading ? React.createElement(\"p\", {\n      className: 'loading',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Loading data...\") : React.createElement(\"div\", {\n      className: 'content received',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, this.state.errorConfirm && React.createElement(\"p\", {\n      className: 'error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, this.state.errorMessage), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Doa\\xE7\\xF5es recebidas\"), React.createElement(\"div\", {\n      className: 'donation',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, donations.length !== 0 ? donations : React.createElement(\"p\", {\n      className: 'loading',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"N\\xE3o existem doa\\xE7\\xF5es feitas para voc\\xEA.\")));\n  }\n\n}\n\nexport default Received;","map":{"version":3,"sources":["/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Received.js"],"names":["React","Component","Item","ResponseType","Connection","Redirect","Received","constructor","props","state","loading","content","errorMessage","error","setupSocket","bind","setContent","query","handleSubmit","msg","id","sessionStorage","getItem","type","DONATIONS_RECEIVED","socket","readyState","OPEN","send","JSON","stringify","setTimeout","setState","errorConfirm","parse","onmessage","r","response","data","SUCCESS","message","confirmSuccessful","FAIL","setError","confirmFailed","componentDidMount","validateDonation","VALIDATE_DONATION","event","preventDefault","target","name","render","donations","map","donation","index","status","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Item from './components/Item'\nimport ResponseType from '../connection/ResponseType'\nimport Connection from '../connection/Connection'\nimport { Redirect } from 'react-router-dom'\n\n/**\n * Componente do React criado utilizando classes para\n * que possa ter acesso a estados. Possui metodos para \n * renderizar e buscar dados no servidor.\n * O componente Received representa uma pagina que possui\n * uma lista com as doacoes recebidas por um usuario\n *\n * @class Received\n * @extends {Component}\n */\nclass Received extends Component {\n\n    /**\n     * Cria uma instancia de Received, que é um JSX Component\n     * \n     * @param {*} props propriedades passadas para o objeto\n     * @memberof Received\n     */\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loading: true,\n            content: [],\n            errorMessage: '',\n            error: false\n        }\n\n        this.setupSocket = this.setupSocket.bind(this)\n        this.setContent = this.setContent.bind(this)\n        this.query = this.query.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    /**\n     * Faz uma request para o servidor enviar todas as \n     * doacoes feitas para o usuario que esta logado\n     *\n     * @memberof Received\n     */\n    query() {\n        const msg = {\n            id: sessionStorage.getItem('id'),\n            type: ResponseType.DONATIONS_RECEIVED\n        }\n\n        if (this.socket.readyState === this.socket.OPEN)\n            this.socket.send(JSON.stringify(msg))\n        else setTimeout(this.query, 10)\n    }\n\n    /**\n     * Muda o estado da pagina, guardando \n     * o conteudo pesquisado no servidor\n     *\n     * @param {Object} content\n     * @memberof Received\n     */\n    setContent(content) {\n        this.setState({\n            error: false,\n            loading: false,\n            errorConfirm: false,\n            content: JSON.parse(content)\n        })\n    }\n\n    /**\n     * Realiza a configuracao do WebSocket (conexao Client-Server)\n     * para realizar a comunicacao e receber os dados \n     *\n     * @memberof Received\n     */\n    setupSocket() {\n        this.socket = Connection\n\n        this.socket.onmessage = (r) => {\n            const response = JSON.parse(r.data)\n            switch (response.type) {\n                case ResponseType.SUCCESS:\n                    switch (response.id) {\n                        case -6:\n                            this.setContent(response.message)\n                            break\n                        case -11:\n                            this.confirmSuccessful()\n                            break\n                        default:\n                    }\n                    break\n                case ResponseType.FAIL:\n                    switch (response.id) {\n                        case -6:\n                            this.setError(response.message)\n                            break\n                        case -11:\n                            this.confirmFailed(response.message)\n                            break\n                        default:\n                    }\n                    break\n                default:\n                    this.setState({\n                        error: true,\n                        errorMessage: 'Erro: Indefinido.'\n                    })\n            }\n        }        \n    }\n\n    /**\n     * Muda o estado da pagina para mostrar um erro ocorrido\n     * no carregamento da pagina\n     *\n     * @param {String} error mensagem de erro\n     * @memberof Received\n     */\n    setError(error) {\n        this.setState({\n            error: true,\n            errorMessage: error\n        })\n    }\n\n    /**\n     * Muda o estado para mostrar um erro quando falha\n     * ao tentar confirmar o recebimento de algum produto\n     *\n     * @param {*} error mensagem de erro\n     * @memberof Received\n     */\n    confirmFailed(error) {\n        this.setState({\n            errorConfirm: true,\n            errorMessage: error\n        })\n    }\n\n    /**\n     * Muda o estado e atualiza a pagina para mostrar \n     * a confirmacao de uma doacao\n     * \n     * @memberof Received\n     */\n    confirmSuccessful() {\n        this.setState({\n            loading: true\n        })\n\n        this.query()\n    }\n\n    /**\n     * Metodo built-in da classe Component que é\n     * chamado sempre que o componente é montado\n     *\n     * @memberof Received\n     */\n    componentDidMount() {\n        this.setupSocket()\n        this.query()\n    }\n\n    /**\n     * Envia uma request para o servidor confirmar o recebimento \n     * da doacao selecionada\n     *\n     * @param {*} id id da doacao a ser confirmada\n     * @memberof Received\n     */\n    validateDonation(id) {\n        if (this.socket.readyState !== this.socket.OPEN) \n            setTimeout(this.validateDonation, 10)\n\n        const msg = {\n            id: id,\n            type: ResponseType.VALIDATE_DONATION\n        }\n\n        this.socket.send(JSON.stringify(msg))\n    }\n\n    /**\n     * Utilizado para gerenciar as submissoes dos \n     * formularios da pagina, realizando a confirmacao\n     * da doacao\n     *\n     * @param {*} event evento de submissao no form\n     * @memberof Received\n     */\n    handleSubmit(event) {\n        event.preventDefault()\n        this.validateDonation(event.target.name)\n    }\n\n    /**\n     * Metodo built-in do component react que retorna o componente JSX\n     * a ser renderizado na tela.\n     * Lista todas as doacoes realizadas recebidas usuario, tendo a opçao\n     * de confirmar recebimento.\n     *\n     * @returns JSX Component\n     * @memberof Received\n     */\n    render() {\n        const { content } = this.state\n\n        const donations = content.map((donation, index) => \n            <form key={index} name={donation.id} onSubmit={this.handleSubmit}>\n                <Item data={donation} type='received' />\n                <hr></hr>\n                {donation.status === 0 ?\n                <input type='submit' value='Confirmar recebimento'></input> :\n                <p>Recebimento confirmado</p>}\n            </form>\n        )\n\n        return (\n            !(sessionStorage.getItem('type') === 'CHARITY') ?\n                <Redirect to='/' />:\n            this.state.error ?\n                <p className={'error'}>{this.state.errorMessage}</p> :\n            this.state.loading ?\n                <p className={'loading'}>Loading data...</p> :\n            <div className={'content received'}>\n                {this.state.errorConfirm &&\n                <p className={'error'}>{this.state.errorMessage}</p>}\n                <h2>Doações recebidas</h2>\n                <div className={'donation'}>\n                    {donations.length !== 0 ?\n                    donations :\n                    <p className={'loading'}>Não existem doações feitas para você.</p>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Received"]},"metadata":{},"sourceType":"module"}