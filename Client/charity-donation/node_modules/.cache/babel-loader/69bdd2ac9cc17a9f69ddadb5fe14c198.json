{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Charity.js\";\nimport React, { Component } from 'react';\nimport Connection from '../connection/Connection';\nimport ResponseType from '../connection/ResponseType';\n\nclass Charity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      content: {},\n      errorMessage: '',\n      error: false,\n      donated: false,\n      photos: [],\n      donation: 0\n    };\n    this.query = this.query.bind(this);\n    this.setContent = this.setContent.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.donationSuccessful = this.donationSuccessful.bind(this);\n  }\n\n  query() {\n    const msg = {\n      id: this.props.match.params.id,\n      type: ResponseType.CHARITY\n    };\n    if (this.socket.readyState === this.socket.OPEN) this.socket.send(JSON.stringify(msg));else setTimeout(this.query, 10);\n  }\n\n  setContent(content) {\n    this.setState({\n      error: false,\n      loading: false,\n      content: JSON.parse(content)\n    });\n    console.log(this.state);\n    console.log(this.state.donation);\n\n    if (this.state.content.needs.needs[this.state.donation].amount === 0) {\n      this.setState({\n        donation: 0\n      });\n    }\n  }\n\n  setError(error) {\n    this.setState({\n      errorMessage: error,\n      error: true\n    });\n  }\n\n  donationSuccessful(message) {\n    this.setState({\n      donated: true,\n      result: message\n    });\n  }\n\n  donationFailed(message) {\n    this.setState({\n      errorDonation: true,\n      errorMessage: message\n    });\n  }\n\n  insertImage(image) {\n    this.setState(curr => ({\n      photos: curr.photos.concat([image])\n    }));\n  }\n\n  setupSocket() {\n    this.socket = Connection;\n    this.socket.binaryType = 'arraybuffer';\n\n    this.socket.onmessage = r => {\n      if (typeof r.data === 'string') {\n        const response = JSON.parse(r.data);\n\n        switch (response.type) {\n          case ResponseType.SUCCESS:\n            switch (response.id) {\n              case -2:\n                // -2 é id de charity\n                this.setContent(response.message);\n                break;\n\n              case -4:\n                // -4 é id de donation\n                this.donationSuccessful(response.message);\n                break;\n\n              default:\n            }\n\n            break;\n\n          case ResponseType.FAIL:\n            switch (response.id) {\n              case -2:\n                // -2 é id de charity\n                this.setError(response.message);\n                break;\n\n              case -4:\n                // -4 é id de donation\n                this.donationFailed(response.message);\n                break;\n\n              default:\n            }\n\n            break;\n\n          default:\n            this.setState({\n              error: true,\n              errorMessage: 'Erro: Indefinido.'\n            });\n        }\n      } else if (r.data instanceof ArrayBuffer) {\n        const image = new Blob([r.data], {\n          type: 'image/png'\n        });\n        this.insertImage(image);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setupSocket();\n    this.query();\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      donated: false\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.donation === undefined) return;\n    if (!this.state.amount) return;\n    this.donate();\n    this.query();\n  }\n\n  donate() {\n    if (this.socket.readyState !== this.socket.OPEN) setTimeout(this.donate, 10);\n\n    if (!this.state.donation) {\n      this.setState({\n        errorDonation: true,\n        errorMessage: 'Error. Donations need an item'\n      });\n    }\n\n    const donation = {\n      donor: {\n        id: sessionStorage.getItem('id')\n      },\n      receiver: {\n        id: this.props.match.params.id\n      },\n      donation: {\n        id: this.state.content.needs.needs[this.state.donation].id\n      },\n      amount: this.state.amount\n    };\n    const msg = {\n      id: sessionStorage.getItem('type') === 'CHARITY' ? 1 : 0,\n      //0 person, 1 charity\n      type: ResponseType.DONATE,\n      message: JSON.stringify(donation)\n    };\n    this.socket.send(JSON.stringify(msg));\n  }\n\n  render() {\n    const _this$state = this.state,\n          content = _this$state.content,\n          photos = _this$state.photos;\n    const preview = photos.map((image, index) => React.createElement(\"img\", {\n      alt: 'img' + index,\n      src: URL.createObjectURL(image),\n      key: index,\n      width: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }));\n    let needs;\n    if (!content.needs) needs = [];else if (!content.needs.needs) needs = [];else needs = content.needs.needs;\n    const needsSelector = needs.map((need, index) => React.createElement(\"label\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, need.amount !== 0 && React.createElement(\"input\", {\n      onChange: this.handleChange,\n      type: \"radio\",\n      name: \"donation\",\n      value: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), need.name));\n    return this.state.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.state.errorMessage) : this.state.loading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Loading data...\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, content.name), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, content.field), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, content.description), preview, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Lista de nec.\"), this.state.donated && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, this.state.result), this.state.errorDonation && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, this.state.errorMessage), React.createElement(\"form\", {\n      name: \"donate\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, needsSelector, this.state.donation && React.createElement(\"input\", {\n      type: \"number\",\n      name: \"amount\",\n      min: \"1\",\n      max: needs[this.state.donation].amount,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Enviar doa\\xE7\\xE3o\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Charity;","map":{"version":3,"sources":["/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Charity.js"],"names":["React","Component","Connection","ResponseType","Charity","constructor","props","state","loading","content","errorMessage","error","donated","photos","donation","query","bind","setContent","handleChange","handleSubmit","donationSuccessful","msg","id","match","params","type","CHARITY","socket","readyState","OPEN","send","JSON","stringify","setTimeout","setState","parse","console","log","needs","amount","setError","message","result","donationFailed","errorDonation","insertImage","image","curr","concat","setupSocket","binaryType","onmessage","r","data","response","SUCCESS","FAIL","ArrayBuffer","Blob","componentDidMount","event","target","name","value","preventDefault","undefined","donate","donor","sessionStorage","getItem","receiver","DONATE","render","preview","map","index","URL","createObjectURL","needsSelector","need","field","description"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAC5BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,OAAO,EAAE,EAFA;AAGTC,MAAAA,YAAY,EAAE,EAHL;AAITC,MAAAA,KAAK,EAAE,KAJE;AAKTC,MAAAA,OAAO,EAAE,KALA;AAMTC,MAAAA,MAAM,EAAE,EANC;AAOTC,MAAAA,QAAQ,EAAE;AAPD,KAAb;AAUA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBJ,IAAxB,CAA6B,IAA7B,CAA1B;AACH;;AAEDD,EAAAA,KAAK,GAAG;AACJ,UAAMM,GAAG,GAAG;AACRC,MAAAA,EAAE,EAAE,KAAKhB,KAAL,CAAWiB,KAAX,CAAiBC,MAAjB,CAAwBF,EADpB;AAERG,MAAAA,IAAI,EAAEtB,YAAY,CAACuB;AAFX,KAAZ;AAKA,QAAI,KAAKC,MAAL,CAAYC,UAAZ,KAA2B,KAAKD,MAAL,CAAYE,IAA3C,EACI,KAAKF,MAAL,CAAYG,IAAZ,CAAiBC,IAAI,CAACC,SAAL,CAAeX,GAAf,CAAjB,EADJ,KAEKY,UAAU,CAAC,KAAKlB,KAAN,EAAa,EAAb,CAAV;AACR;;AAEDE,EAAAA,UAAU,CAACR,OAAD,EAAU;AAChB,SAAKyB,QAAL,CAAc;AACVvB,MAAAA,KAAK,EAAE,KADG;AAEVH,MAAAA,OAAO,EAAE,KAFC;AAGVC,MAAAA,OAAO,EAAEsB,IAAI,CAACI,KAAL,CAAW1B,OAAX;AAHC,KAAd;AAMA2B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9B,KAAjB;AACA6B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9B,KAAL,CAAWO,QAAvB;;AAEA,QAAI,KAAKP,KAAL,CAAWE,OAAX,CAAmB6B,KAAnB,CAAyBA,KAAzB,CAA+B,KAAK/B,KAAL,CAAWO,QAA1C,EAAoDyB,MAApD,KAA+D,CAAnE,EAAsE;AAClE,WAAKL,QAAL,CAAc;AACVpB,QAAAA,QAAQ,EAAE;AADA,OAAd;AAGH;AACJ;;AAED0B,EAAAA,QAAQ,CAAC7B,KAAD,EAAQ;AACZ,SAAKuB,QAAL,CAAc;AACVxB,MAAAA,YAAY,EAAEC,KADJ;AAEVA,MAAAA,KAAK,EAAE;AAFG,KAAd;AAIH;;AAEDS,EAAAA,kBAAkB,CAACqB,OAAD,EAAU;AACxB,SAAKP,QAAL,CAAc;AACVtB,MAAAA,OAAO,EAAE,IADC;AAEV8B,MAAAA,MAAM,EAAED;AAFE,KAAd;AAIH;;AAEDE,EAAAA,cAAc,CAACF,OAAD,EAAU;AACpB,SAAKP,QAAL,CAAc;AACVU,MAAAA,aAAa,EAAE,IADL;AAEVlC,MAAAA,YAAY,EAAE+B;AAFJ,KAAd;AAIH;;AAEDI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKZ,QAAL,CAAea,IAAD,KAAW;AACrBlC,MAAAA,MAAM,EAAEkC,IAAI,CAAClC,MAAL,CAAYmC,MAAZ,CAAmB,CAACF,KAAD,CAAnB;AADa,KAAX,CAAd;AAGH;;AAEDG,EAAAA,WAAW,GAAG;AACV,SAAKtB,MAAL,GAAczB,UAAd;AAEA,SAAKyB,MAAL,CAAYuB,UAAZ,GAAyB,aAAzB;;AAEA,SAAKvB,MAAL,CAAYwB,SAAZ,GAAyBC,CAAD,IAAO;AAC3B,UAAI,OAAOA,CAAC,CAACC,IAAT,KAAkB,QAAtB,EAAgC;AAC5B,cAAMC,QAAQ,GAAGvB,IAAI,CAACI,KAAL,CAAWiB,CAAC,CAACC,IAAb,CAAjB;;AACA,gBAAQC,QAAQ,CAAC7B,IAAjB;AACI,eAAKtB,YAAY,CAACoD,OAAlB;AACI,oBAAOD,QAAQ,CAAChC,EAAhB;AACI,mBAAK,CAAC,CAAN;AAAS;AACL,qBAAKL,UAAL,CAAgBqC,QAAQ,CAACb,OAAzB;AACA;;AACJ,mBAAK,CAAC,CAAN;AAAS;AACL,qBAAKrB,kBAAL,CAAwBkC,QAAQ,CAACb,OAAjC;AACA;;AACJ;AAPJ;;AASA;;AACJ,eAAKtC,YAAY,CAACqD,IAAlB;AACI,oBAAOF,QAAQ,CAAChC,EAAhB;AACI,mBAAK,CAAC,CAAN;AAAS;AACT,qBAAKkB,QAAL,CAAcc,QAAQ,CAACb,OAAvB;AACI;;AACJ,mBAAK,CAAC,CAAN;AAAS;AACL,qBAAKE,cAAL,CAAoBW,QAAQ,CAACb,OAA7B;AACA;;AACJ;AAPJ;;AASA;;AACJ;AACI,iBAAKP,QAAL,CAAc;AACVvB,cAAAA,KAAK,EAAE,IADG;AAEVD,cAAAA,YAAY,EAAE;AAFJ,aAAd;AAxBR;AA6BH,OA/BD,MA+BO,IAAI0C,CAAC,CAACC,IAAF,YAAkBI,WAAtB,EAAmC;AACtC,cAAMX,KAAK,GAAG,IAAIY,IAAJ,CAAS,CAACN,CAAC,CAACC,IAAH,CAAT,EAAmB;AAAC5B,UAAAA,IAAI,EAAE;AAAP,SAAnB,CAAd;AACA,aAAKoB,WAAL,CAAiBC,KAAjB;AACH;AACJ,KApCD;AAqCH;;AAEDa,EAAAA,iBAAiB,GAAG;AAChB,SAAKV,WAAL;AACA,SAAKlC,KAAL;AACH;;AAEDG,EAAAA,YAAY,CAAC0C,KAAD,EAAQ;AAChB,SAAK1B,QAAL,CAAc;AACV,OAAC0B,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE,KADxB;AAEVnD,MAAAA,OAAO,EAAE;AAFC,KAAd;AAIH;;AAEDO,EAAAA,YAAY,CAACyC,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACI,cAAN;AACA,QAAI,KAAKzD,KAAL,CAAWO,QAAX,KAAwBmD,SAA5B,EAAuC;AACvC,QAAI,CAAC,KAAK1D,KAAL,CAAWgC,MAAhB,EAAwB;AAExB,SAAK2B,MAAL;AAEA,SAAKnD,KAAL;AACH;;AAEDmD,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKvC,MAAL,CAAYC,UAAZ,KAA2B,KAAKD,MAAL,CAAYE,IAA3C,EACII,UAAU,CAAC,KAAKiC,MAAN,EAAc,EAAd,CAAV;;AAEJ,QAAI,CAAC,KAAK3D,KAAL,CAAWO,QAAhB,EAA0B;AACtB,WAAKoB,QAAL,CAAc;AACVU,QAAAA,aAAa,EAAE,IADL;AAEVlC,QAAAA,YAAY,EAAE;AAFJ,OAAd;AAIH;;AAED,UAAMI,QAAQ,GAAG;AACbqD,MAAAA,KAAK,EAAE;AACH7C,QAAAA,EAAE,EAAE8C,cAAc,CAACC,OAAf,CAAuB,IAAvB;AADD,OADM;AAIbC,MAAAA,QAAQ,EAAE;AACNhD,QAAAA,EAAE,EAAE,KAAKhB,KAAL,CAAWiB,KAAX,CAAiBC,MAAjB,CAAwBF;AADtB,OAJG;AAObR,MAAAA,QAAQ,EAAE;AACNQ,QAAAA,EAAE,EAAE,KAAKf,KAAL,CAAWE,OAAX,CAAmB6B,KAAnB,CAAyBA,KAAzB,CAA+B,KAAK/B,KAAL,CAAWO,QAA1C,EAAoDQ;AADlD,OAPG;AAUbiB,MAAAA,MAAM,EAAE,KAAKhC,KAAL,CAAWgC;AAVN,KAAjB;AAaA,UAAMlB,GAAG,GAAG;AACRC,MAAAA,EAAE,EAAE8C,cAAc,CAACC,OAAf,CAAuB,MAAvB,MAAmC,SAAnC,GAA+C,CAA/C,GAAmD,CAD/C;AACkD;AAC1D5C,MAAAA,IAAI,EAAEtB,YAAY,CAACoE,MAFX;AAGR9B,MAAAA,OAAO,EAAEV,IAAI,CAACC,SAAL,CAAelB,QAAf;AAHD,KAAZ;AAMA,SAAKa,MAAL,CAAYG,IAAZ,CAAiBC,IAAI,CAACC,SAAL,CAAeX,GAAf,CAAjB;AACH;;AAEDmD,EAAAA,MAAM,GAAG;AAAA,wBACuB,KAAKjE,KAD5B;AAAA,UACGE,OADH,eACGA,OADH;AAAA,UACYI,MADZ,eACYA,MADZ;AAGL,UAAM4D,OAAO,GAAG5D,MAAM,CAAC6D,GAAP,CAAW,CAAC5B,KAAD,EAAQ6B,KAAR,KACvB;AAAK,MAAA,GAAG,EAAE,QAAMA,KAAhB;AAAuB,MAAA,GAAG,EAAEC,GAAG,CAACC,eAAJ,CAAoB/B,KAApB,CAA5B;AAAwD,MAAA,GAAG,EAAE6B,KAA7D;AAAoE,MAAA,KAAK,EAAC,KAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADY,CAAhB;AAIA,QAAIrC,KAAJ;AACA,QAAI,CAAC7B,OAAO,CAAC6B,KAAb,EAAoBA,KAAK,GAAG,EAAR,CAApB,KACK,IAAI,CAAC7B,OAAO,CAAC6B,KAAR,CAAcA,KAAnB,EAA0BA,KAAK,GAAG,EAAR,CAA1B,KACAA,KAAK,GAAG7B,OAAO,CAAC6B,KAAR,CAAcA,KAAtB;AAEL,UAAMwC,aAAa,GAAGxC,KAAK,CAACoC,GAAN,CAAU,CAACK,IAAD,EAAOJ,KAAP,KAC5B;AAAO,MAAA,GAAG,EAAEA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKI,IAAI,CAACxC,MAAL,KAAgB,CAAhB,IACD;AAAO,MAAA,QAAQ,EAAE,KAAKrB,YAAtB;AAAoC,MAAA,IAAI,EAAC,OAAzC;AAAiD,MAAA,IAAI,EAAC,UAAtD;AAAiE,MAAA,KAAK,EAAEyD,KAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGKI,IAAI,CAACjB,IAHV,CADkB,CAAtB;AAQA,WACI,KAAKvD,KAAL,CAAWI,KAAX,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKJ,KAAL,CAAWG,YAAf,CADA,GAEA,KAAKH,KAAL,CAAWC,OAAX,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADA,GAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,OAAO,CAACqD,IAAb,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKrD,OAAO,CAACuE,KAAb,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIvE,OAAO,CAACwE,WAAZ,CAHJ,EAKKR,OALL,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPJ,EAQK,KAAKlE,KAAL,CAAWK,OAAX,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKL,KAAL,CAAWmC,MAAf,CATJ,EAUK,KAAKnC,KAAL,CAAWqC,aAAX,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKrC,KAAL,CAAWG,YAAf,CAXJ,EAYI;AAAM,MAAA,IAAI,EAAC,QAAX;AAAoB,MAAA,QAAQ,EAAE,KAAKS,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK2D,aADL,EAEK,KAAKvE,KAAL,CAAWO,QAAX,IACD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,QAA1B;AAAmC,MAAA,GAAG,EAAC,GAAvC;AAA2C,MAAA,GAAG,EAAEwB,KAAK,CAAC,KAAK/B,KAAL,CAAWO,QAAZ,CAAL,CAA2ByB,MAA3E;AAAmF,MAAA,QAAQ,EAAE,KAAKrB,YAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,qBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAZJ,CALJ;AAyBH;;AA5N2B;;AA+NhC,eAAed,OAAf","sourcesContent":["import React, {Component} from 'react'\nimport Connection from '../connection/Connection'\nimport ResponseType from '../connection/ResponseType'\n\nclass Charity extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loading: true,\n            content: {},\n            errorMessage: '',\n            error: false,\n            donated: false,\n            photos: [],\n            donation: 0\n        }\n\n        this.query = this.query.bind(this)\n        this.setContent = this.setContent.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.donationSuccessful = this.donationSuccessful.bind(this)\n    }\n\n    query() {\n        const msg = {\n            id: this.props.match.params.id,\n            type: ResponseType.CHARITY\n        }\n\n        if (this.socket.readyState === this.socket.OPEN)\n            this.socket.send(JSON.stringify(msg))\n        else setTimeout(this.query, 10)\n    }\n\n    setContent(content) {\n        this.setState({\n            error: false,\n            loading: false,\n            content: JSON.parse(content)\n        })\n\n        console.log(this.state)\n        console.log(this.state.donation)\n\n        if (this.state.content.needs.needs[this.state.donation].amount === 0) {\n            this.setState({\n                donation: 0\n            })\n        }\n    }\n\n    setError(error) {\n        this.setState({\n            errorMessage: error,\n            error: true\n        })\n    }\n\n    donationSuccessful(message) {\n        this.setState({\n            donated: true,\n            result: message\n        })\n    }\n\n    donationFailed(message) {\n        this.setState({\n            errorDonation: true,\n            errorMessage: message\n        })\n    }\n\n    insertImage(image) {\n        this.setState((curr) => ({\n            photos: curr.photos.concat([image])\n        }))\n    }\n\n    setupSocket() {\n        this.socket = Connection\n\n        this.socket.binaryType = 'arraybuffer'\n\n        this.socket.onmessage = (r) => {\n            if (typeof r.data === 'string') {                    \n                const response = JSON.parse(r.data)\n                switch (response.type) {\n                    case ResponseType.SUCCESS:\n                        switch(response.id) {\n                            case -2: // -2 é id de charity\n                                this.setContent(response.message)\n                                break\n                            case -4: // -4 é id de donation\n                                this.donationSuccessful(response.message)\n                                break\n                            default:\n                        }\n                        break\n                    case ResponseType.FAIL:\n                        switch(response.id) {\n                            case -2: // -2 é id de charity\n                            this.setError(response.message)\n                                break\n                            case -4: // -4 é id de donation\n                                this.donationFailed(response.message)\n                                break\n                            default:\n                        }\n                        break\n                    default:\n                        this.setState({\n                            error: true,\n                            errorMessage: 'Erro: Indefinido.'\n                        })\n                }\n            } else if (r.data instanceof ArrayBuffer) {\n                const image = new Blob([r.data], {type: 'image/png'})\n                this.insertImage(image)\n            }\n        }        \n    }\n\n    componentDidMount() {\n        this.setupSocket()\n        this.query()\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value,\n            donated: false\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        if (this.state.donation === undefined) return\n        if (!this.state.amount) return\n\n        this.donate()\n\n        this.query()\n    }\n\n    donate() {\n        if (this.socket.readyState !== this.socket.OPEN) \n            setTimeout(this.donate, 10)\n\n        if (!this.state.donation) {\n            this.setState({\n                errorDonation: true,\n                errorMessage: 'Error. Donations need an item'\n            })\n        }\n\n        const donation = {\n            donor: {\n                id: sessionStorage.getItem('id')\n            },\n            receiver: {\n                id: this.props.match.params.id\n            },\n            donation: {\n                id: this.state.content.needs.needs[this.state.donation].id\n            },\n            amount: this.state.amount\n        }\n\n        const msg = {\n            id: sessionStorage.getItem('type') === 'CHARITY' ? 1 : 0, //0 person, 1 charity\n            type: ResponseType.DONATE,\n            message: JSON.stringify(donation)\n        }\n\n        this.socket.send(JSON.stringify(msg))\n    }\n\n    render() {\n        const { content, photos } = this.state\n        \n        const preview = photos.map((image, index) => \n            <img alt={'img'+index} src={URL.createObjectURL(image)} key={index} width='100'/>\n        )\n\n        let needs\n        if (!content.needs) needs = []\n        else if (!content.needs.needs) needs = []\n        else needs = content.needs.needs\n\n        const needsSelector = needs.map((need, index) => \n            <label key={index}>\n                {need.amount !== 0 &&\n                <input onChange={this.handleChange} type='radio' name='donation' value={index}></input>}\n                {need.name}\n            </label>\n        )\n\n        return (\n            this.state.error ?\n            <p>{this.state.errorMessage}</p> :\n            this.state.loading ?\n            <p>Loading data...</p> :\n            <div>\n                <h1>{content.name}</h1>\n                <h2>{content.field}</h2>\n                <p>{content.description}</p>\n\n                {preview}\n\n                <h2>Lista de nec.</h2>\n                {this.state.donated &&\n                <p>{this.state.result}</p>}\n                {this.state.errorDonation &&\n                <p>{this.state.errorMessage}</p>}\n                <form name='donate' onSubmit={this.handleSubmit}>\n                    {needsSelector}\n                    {this.state.donation &&\n                    <input type='number' name='amount' min='1' max={needs[this.state.donation].amount} onChange={this.handleChange}></input>}\n                    <input type='submit' value='Enviar doação'/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Charity"]},"metadata":{},"sourceType":"module"}