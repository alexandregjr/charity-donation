{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Login.js\";\nimport React, { Component } from 'react';\nimport ResponseType from '../connection/ResponseType';\nimport Connection from '../connection/Connection';\nimport CryptoJS from 'crypto-js';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  login() {\n    if (this.socket.readyState !== this.socket.OPEN) setTimeout(this.login, 10);\n    const _this$state = this.state,\n          username = _this$state.username,\n          password = _this$state.password;\n\n    if (username && password) {\n      const hashPass = CryptoJS.MD5(password);\n      const user = {\n        username: username,\n        password: hashPass.toString()\n      };\n      const msg = {\n        type: ResponseType.LOGIN,\n        message: JSON.stringify(user)\n      };\n      this.socket.send(JSON.stringify(msg));\n    } else {\n      this.setState({\n        error: true,\n        errorMessage: 'Insira o nome e a senha'\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.login();\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  logged(id, type) {\n    sessionStorage.setItem('id', id);\n    sessionStorage.setItem('type', type.toUpperCase());\n    window.location.reload();\n  }\n\n  loginError(error) {\n    this.setState({\n      errorMessage: error,\n      error: true\n    });\n  } //TODO arrumar responses possiveis\n\n\n  setupSocket() {\n    this.socket = Connection;\n\n    this.socket.onmessage = r => {\n      const response = JSON.parse(r.data);\n      console.log(response);\n\n      switch (response.type) {\n        case ResponseType.SUCCESS:\n          this.logged(response.id, response.message);\n          break;\n\n        case ResponseType.FAIL:\n          this.loginError(response.message);\n          break;\n\n        default:\n          this.setState({\n            errorMessage: 'Erro: Indefinido.',\n            error: true\n          });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setupSocket();\n  }\n\n  render() {\n    return sessionStorage.getItem('id') ? React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: 'content login',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Logar\"), this.state.error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.errorMessage), React.createElement(\"form\", {\n      name: \"login\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleChange,\n      name: \"username\",\n      type: \"text\",\n      placeholder: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: this.handleChange,\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"senha\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Entrar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Login.js"],"names":["React","Component","ResponseType","Connection","CryptoJS","Redirect","Login","constructor","props","state","errorMessage","handleSubmit","bind","handleChange","login","socket","readyState","OPEN","setTimeout","username","password","hashPass","MD5","user","toString","msg","type","LOGIN","message","JSON","stringify","send","setState","error","event","preventDefault","target","name","value","logged","id","sessionStorage","setItem","toUpperCase","window","location","reload","loginError","setupSocket","onmessage","r","response","parse","data","console","log","SUCCESS","FAIL","componentDidMount","render","getItem"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ResponseType from '../connection/ResponseType'\nimport Connection from '../connection/Connection'\nimport CryptoJS from 'crypto-js'\nimport {Redirect} from 'react-router-dom'\n\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            errorMessage: ''\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    login() {\n        if (this.socket.readyState !== this.socket.OPEN) \n            setTimeout(this.login, 10)\n\n        const { username, password } = this.state\n        if (username && password) {\n            const hashPass = CryptoJS.MD5(password)\n            const user = {\n                username: username,\n                password: hashPass.toString()\n            }\n\n            const msg = {\n                type: ResponseType.LOGIN,\n                message: JSON.stringify(user)\n            }\n\n            this.socket.send(JSON.stringify(msg))\n        } else {\n            this.setState({\n                error: true,\n                errorMessage: 'Insira o nome e a senha'\n            })\n        }\n    }\n    \n    handleSubmit(event) {\n        event.preventDefault()\n        this.login()\n    } \n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    logged(id, type) {\n        sessionStorage.setItem('id', id)\n        sessionStorage.setItem('type', type.toUpperCase())   \n        window.location.reload()     \n    }\n\n    loginError(error) {\n        this.setState({\n            errorMessage: error, \n            error: true\n        })\n    }\n\n    //TODO arrumar responses possiveis\n    setupSocket() {\n        this.socket = Connection\n        \n        this.socket.onmessage = (r) => {\n            const response = JSON.parse(r.data)\n            console.log(response)\n            switch (response.type) {\n                case ResponseType.SUCCESS:\n                    this.logged(response.id, response.message)\n                    break\n                case ResponseType.FAIL:\n                    this.loginError(response.message)\n                    break\n                default:\n                    this.setState({\n                        errorMessage: 'Erro: Indefinido.',\n                        error: true\n                    })\n            }\n        }        \n    }\n\n    componentDidMount() {\n        this.setupSocket()\n    }\n\n    render() {\n        return (\n            sessionStorage.getItem('id') ?\n            <Redirect to='/'></Redirect> :\n            <div className={'content login'}>\n                <h2>Logar</h2>\n                {this.state.error &&\n                <p>{this.state.errorMessage}</p>}\n                <form name='login' onSubmit={this.handleSubmit}>\n                    <input onChange={this.handleChange} name='username' type='text' placeholder='username'></input>\n                    <input onChange={this.handleChange} name='password' type='password' placeholder='senha'></input>\n                    <input type='submit' value='Entrar'></input>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Login"]},"metadata":{},"sourceType":"module"}