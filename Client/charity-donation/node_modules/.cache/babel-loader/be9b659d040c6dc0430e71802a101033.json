{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Donations.js\";\nimport React, { Component } from 'react';\nimport Item from './components/Item';\nimport ResponseType from '../connection/ResponseType';\nimport Connection from '../connection/Connection';\n/**\n * Componente do React criado utilizando classes para\n * que possa ter acesso a estados. Possui metodos para \n * renderizar e buscar dados no servidor.\n * O componente Donations representa uma pagina que \n * possui as doacoes realizadas pelo user logado.\n *\n * @class Donations\n * @extends {Component}\n */\n\nclass Donations extends Component {\n  /**\n   * Cria uma instancia de Donations, que é um JSX Component\n   * \n   * @param {*} props propriedades passadas para o objeto\n   * @memberof Donations\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      content: [],\n      errorMessage: '',\n      error: false\n    };\n    this.setupSocket = this.setupSocket.bind(this);\n    this.setContent = this.setContent.bind(this);\n    this.setError = this.setError.bind(this);\n    this.query = this.query.bind(this);\n  }\n  /**\n   * Faz uma request para o servidor enviar todas as \n   * doacoes feitas para o usuario que esta logado\n   *\n   * @memberof Donations\n   */\n\n\n  query() {\n    const msg = {\n      id: sessionStorage.getItem('id'),\n      type: ResponseType.DONATIONS_MADE,\n      message: sessionStorage.getItem('type').toLocaleLowerCase()\n    };\n    if (this.socket.readyState === this.socket.OPEN) this.socket.send(JSON.stringify(msg));else setTimeout(this.query, 10);\n  }\n  /**\n   * Muda o estado da pagina, guardando \n   * o conteudo pesquisado no servidor\n   *\n   * @param {Object} content\n   * @memberof Donations\n   */\n\n\n  setContent(content) {\n    this.setState({\n      error: false,\n      loading: false,\n      content: JSON.parse(content)\n    });\n  }\n  /**\n   * Muda o estado da pagina para mostrar um erro ocorrido\n   * no carregamento da pagina\n   *\n   * @param {String} error mensagem de erro\n   * @memberof Donations\n   */\n\n\n  setError(error) {\n    this.setState({\n      errorMessage: error,\n      error: true\n    });\n  }\n  /**\n   * Realiza a configuracao do WebSocket (conexao Client-Server)\n   * para realizar a comunicacao e receber os dados \n   *\n   * @memberof Donations\n   */\n\n\n  setupSocket() {\n    this.socket = Connection;\n\n    this.socket.onmessage = r => {\n      const response = JSON.parse(r.data);\n\n      switch (response.type) {\n        case ResponseType.SUCCESS:\n          this.setContent(response.message);\n          break;\n\n        case ResponseType.FAIL:\n          this.setError(response.message);\n          break;\n\n        default:\n          this.setState({\n            error: true,\n            errorMessage: 'Erro: Indefinido.'\n          });\n      }\n    };\n  }\n  /**\n   * Metodo built-in da classe Component que é\n   * chamado sempre que o componente é montado\n   *\n   * @memberof Donations\n   */\n\n\n  componentDidMount() {\n    this.setupSocket();\n    this.query();\n  }\n  /**\n   * Metodo built-in do component react que retorna o componente JSX\n   * a ser renderizado na tela.\n   * Lista todas as doacoes realizadas pelo usuario.\n   *\n   * @returns JSX Component\n   * @memberof Charity\n   */\n\n\n  render() {\n    const content = this.state.content;\n    const donations = content.map((donation, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Item, {\n      data: donation,\n      type: \"made\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), donation.status === 1 && React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), donation.status === 1 && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"A institui\\xE7\\xE3o confirmou o recebimento da doa\\xE7\\xE3o\")));\n    return this.state.error ? React.createElement(\"p\", {\n      className: 'error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.errorMessage) : this.state.loading ? React.createElement(\"p\", {\n      className: 'loading',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Loading data...\") : React.createElement(\"div\", {\n      className: 'content donations',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Doa\\xE7\\xF5es feitas\"), React.createElement(\"div\", {\n      className: 'donation',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, donations.length !== 0 ? donations : React.createElement(\"p\", {\n      className: 'loading',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"N\\xE3o existem doa\\xE7\\xF5es feitas por voc\\xEA.\")));\n  }\n\n}\n\nexport default Donations;","map":{"version":3,"sources":["/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Donations.js"],"names":["React","Component","Item","ResponseType","Connection","Donations","constructor","props","state","loading","content","errorMessage","error","setupSocket","bind","setContent","setError","query","msg","id","sessionStorage","getItem","type","DONATIONS_MADE","message","toLocaleLowerCase","socket","readyState","OPEN","send","JSON","stringify","setTimeout","setState","parse","onmessage","r","response","data","SUCCESS","FAIL","componentDidMount","render","donations","map","donation","index","status","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Item from './components/Item'\nimport ResponseType from '../connection/ResponseType'\nimport Connection from '../connection/Connection'\n\n/**\n * Componente do React criado utilizando classes para\n * que possa ter acesso a estados. Possui metodos para \n * renderizar e buscar dados no servidor.\n * O componente Donations representa uma pagina que \n * possui as doacoes realizadas pelo user logado.\n *\n * @class Donations\n * @extends {Component}\n */\nclass Donations extends Component {\n\n    /**\n     * Cria uma instancia de Donations, que é um JSX Component\n     * \n     * @param {*} props propriedades passadas para o objeto\n     * @memberof Donations\n     */\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loading: true,\n            content: [],\n            errorMessage: '',\n            error: false\n        }\n\n        this.setupSocket = this.setupSocket.bind(this)\n        this.setContent = this.setContent.bind(this)\n        this.setError = this.setError.bind(this)\n        this.query = this.query.bind(this)\n    }\n    \n    /**\n     * Faz uma request para o servidor enviar todas as \n     * doacoes feitas para o usuario que esta logado\n     *\n     * @memberof Donations\n     */\n    query() {\n        const msg = {\n            id: sessionStorage.getItem('id'),\n            type: ResponseType.DONATIONS_MADE,\n            message: sessionStorage.getItem('type').toLocaleLowerCase()\n        }\n\n        if (this.socket.readyState === this.socket.OPEN)\n            this.socket.send(JSON.stringify(msg))\n        else setTimeout(this.query, 10)\n    }\n\n    /**\n     * Muda o estado da pagina, guardando \n     * o conteudo pesquisado no servidor\n     *\n     * @param {Object} content\n     * @memberof Donations\n     */\n    setContent(content) {\n        this.setState({\n            error: false,\n            loading: false,\n            content: JSON.parse(content)\n        })\n    }\n\n    /**\n     * Muda o estado da pagina para mostrar um erro ocorrido\n     * no carregamento da pagina\n     *\n     * @param {String} error mensagem de erro\n     * @memberof Donations\n     */\n    setError(error) {\n        this.setState({\n            errorMessage: error,\n            error: true\n        })\n    }\n\n    /**\n     * Realiza a configuracao do WebSocket (conexao Client-Server)\n     * para realizar a comunicacao e receber os dados \n     *\n     * @memberof Donations\n     */\n    setupSocket() {\n        this.socket = Connection\n\n        this.socket.onmessage = (r) => {\n            const response = JSON.parse(r.data)\n            switch (response.type) {\n                case ResponseType.SUCCESS:\n                    this.setContent(response.message)\n                    break\n                case ResponseType.FAIL:\n                    this.setError(response.message)\n                    break\n                default:\n                      this.setState({\n                        error: true,\n                        errorMessage: 'Erro: Indefinido.'\n                    })\n            }\n        }        \n    }\n\n    /**\n     * Metodo built-in da classe Component que é\n     * chamado sempre que o componente é montado\n     *\n     * @memberof Donations\n     */\n    componentDidMount() {\n        this.setupSocket()\n        this.query()\n    }\n\n    /**\n     * Metodo built-in do component react que retorna o componente JSX\n     * a ser renderizado na tela.\n     * Lista todas as doacoes realizadas pelo usuario.\n     *\n     * @returns JSX Component\n     * @memberof Charity\n     */\n    render() {\n        const { content } = this.state\n\n        const donations = content.map((donation, index) => \n            <div key={index}>\n                <Item data={donation} type='made' />\n                {donation.status === 1 &&\n                <hr></hr>}\n                {donation.status === 1 &&\n                <p>A instituição confirmou o recebimento da doação</p>}\n            </div>\n        )\n\n        return (\n            this.state.error ?\n            <p className={'error'}>{this.state.errorMessage}</p> :\n            this.state.loading ?\n            <p className={'loading'}>Loading data...</p> :\n            <div className={'content donations'}>\n                <h2>Doações feitas</h2>\n                <div className={'donation'}>\n                    {donations.length !== 0 ?\n                    donations :\n                    <p className={'loading'}>Não existem doações feitas por você.</p>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Donations"]},"metadata":{},"sourceType":"module"}