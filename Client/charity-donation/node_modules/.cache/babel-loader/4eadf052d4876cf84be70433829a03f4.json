{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Charity.js\";\nimport React, { Component } from 'react';\nimport Connection from '../connection/Connection';\nimport ResponseType from '../connection/ResponseType';\n/**\n * Componente do React criado utilizando classes para\n * que possa ter acesso a estados. Possui metodos para \n * renderizar e buscar dados no servidor.\n * O componente Charity representa uma pagina de uma\n * Instituição de Caridade.\n *\n * @class Charity\n * @extends {Component}\n */\n\nclass Charity extends Component {\n  /**\n   * Cria uma instancia de Charity, que é um JSX Component\n   * \n   * @param {*} props propriedades passadas para o objeto\n   * @memberof Charity\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      content: {},\n      errorMessage: '',\n      error: false,\n      donated: false,\n      photos: []\n    };\n    this.query = this.query.bind(this);\n    this.setContent = this.setContent.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.donationSuccessful = this.donationSuccessful.bind(this);\n  }\n  /**\n   * Faz uma request para o servidor enviar os dados da Instituicao\n   * cuja página está sendo acessada.\n   *\n   * @memberof Charity\n   */\n\n\n  query() {\n    const msg = {\n      id: this.props.match.params.id,\n      // onde fica o id que está na window.location\n      type: ResponseType.CHARITY\n    };\n    if (this.socket.readyState === this.socket.OPEN) this.socket.send(JSON.stringify(msg));else setTimeout(this.query, 10);\n  }\n  /**\n   * Muda o estado da pagina, guardando \n   * o conteudo pesquisado no servidor\n   *\n   * @param {Object} content objeto contendo os dados\n   * @memberof Charity\n   */\n\n\n  setContent(content) {\n    this.setState({\n      error: false,\n      loading: false,\n      content: JSON.parse(content)\n    });\n\n    if (this.state.donation && this.state.content.needs.needs[this.state.donation].amount === 0) {\n      this.setState({\n        donation: ''\n      });\n    }\n  }\n  /**\n   * Muda o estado da pagina para mostrar um erro ocorrido\n   * no carregamento da pagina\n   *\n   * @param {String} error mensagem de erro\n   * @memberof Charity\n   */\n\n\n  setError(error) {\n    this.setState({\n      errorMessage: error,\n      error: true\n    });\n  }\n  /**\n   * Muda o estado para mostrar o cadastro da doacao \n   * realizado com sucesso\n   *\n   * @param {String} message mensagem retornada pelo servidor\n   * @memberof Charity\n   */\n\n\n  donationSuccessful(message) {\n    this.setState({\n      donated: true,\n      result: message\n    });\n    this.query();\n  }\n  /**\n   * Muda o estado para mostrar o erro gerado ao tentar\n   * realizar uma doacao\n   *\n   * @param {String} message mensagem retornada pelo servidor\n   * @memberof Charity\n   */\n\n\n  donationFailed(message) {\n    this.setState({\n      errorDonation: true,\n      errorMessage: message\n    });\n  }\n  /**\n   * Insere uma imagem recebida do servidor no estado\n   * da pagino\n   *\n   * @param {Blob} image imagem recebida do servidor (Blob)\n   * @memberof Charity\n   */\n\n\n  insertImage(image) {\n    this.setState(curr => ({\n      photos: curr.photos.concat([image])\n    }));\n  }\n  /**\n   * Realiza a configuracao do WebSocket (conexao Client-Server)\n   * para realizar a comunicacao e receber os dados \n   *\n   * @memberof Charity\n   */\n\n\n  setupSocket() {\n    this.socket = Connection;\n    this.socket.binaryType = 'arraybuffer';\n\n    this.socket.onmessage = r => {\n      if (typeof r.data === 'string') {\n        const response = JSON.parse(r.data);\n\n        switch (response.type) {\n          case ResponseType.SUCCESS:\n            switch (response.id) {\n              case -2:\n                // -2 é id de charity\n                this.setContent(response.message);\n                break;\n\n              case -4:\n                // -4 é id de donation\n                this.donationSuccessful(response.message);\n                break;\n\n              default:\n            }\n\n            break;\n\n          case ResponseType.FAIL:\n            switch (response.id) {\n              case -2:\n                // -2 é id de charity\n                this.setError(response.message);\n                break;\n\n              case -4:\n                // -4 é id de donation\n                this.donationFailed(response.message);\n                break;\n\n              default:\n            }\n\n            break;\n\n          default:\n            this.setState({\n              error: true,\n              errorMessage: 'Erro: Indefinido.'\n            });\n        }\n      } else if (r.data instanceof ArrayBuffer) {\n        const image = new Blob([r.data], {\n          type: 'image/png'\n        });\n        this.insertImage(image);\n      }\n    };\n  }\n  /**\n   * Metodo built-in da classe Component que é\n   * chamado sempre que o componente é montado\n   *\n   * @memberof Charity\n   */\n\n\n  componentDidMount() {\n    this.setupSocket();\n    this.query();\n  }\n  /**\n   * Utilizado para gerenciar as alteracoes nos \n   * formularios da pagina, guardando os valores no\n   * estado\n   *\n   * @param {*} event evento de mudanca no form\n   * @memberof Charity\n   */\n\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorDonation: false,\n      donated: false\n    });\n  }\n  /**\n   * Utilizado para gerenciar as submissoes dos \n   * formularios da pagina, tentando realizar a doacao\n   *\n   * @param {*} event evento de submissao no form\n   * @memberof Charity\n   */\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (!this.state.donation) {\n      this.setState({\n        errorDonation: true,\n        errorMessage: 'Erro. Precisa selecionar um item.'\n      });\n      return;\n    }\n\n    if (!this.state.amount) {\n      this.setState({\n        errorDonation: true,\n        errorMessage: 'Erro. Precisa dizer a quantidade.'\n      });\n      return;\n    }\n\n    this.donate();\n    event.target.reset();\n  }\n  /**\n   * Realiza a comunicacao com o Servidor, tentando \n   * registrar uma nova doacao, do usuario logado, para \n   * a instituicao\n   *\n   * @memberof Charity\n   */\n\n\n  donate() {\n    if (this.socket.readyState !== this.socket.OPEN) setTimeout(this.donate, 10);\n    const donation = {\n      donor: {\n        id: sessionStorage.getItem('id')\n      },\n      receiver: {\n        id: this.props.match.params.id\n      },\n      donation: {\n        id: this.state.content.needs.needs[this.state.donation].id\n      },\n      amount: this.state.amount\n    };\n    const msg = {\n      id: sessionStorage.getItem('type') === 'CHARITY' ? 1 : 0,\n      //0 person, 1 charity\n      type: ResponseType.DONATE,\n      message: JSON.stringify(donation)\n    };\n    this.socket.send(JSON.stringify(msg));\n  }\n  /**\n   * Metodo built-in do component react que retorna o componente JSX\n   * a ser renderizado na tela.\n   * Possui os dados de uma Instituição, inclusive as imagens selecionadas\n   * e um formulario para submeter uma doacao.\n   *\n   * @returns JSX Component\n   * @memberof Charity\n   */\n\n\n  render() {\n    const _this$state = this.state,\n          content = _this$state.content,\n          photos = _this$state.photos;\n    const preview = photos.map((image, index) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: 'img' + index,\n      src: URL.createObjectURL(image),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    })));\n    let needs;\n    if (!content.needs) needs = [];else if (!content.needs.needs) needs = [];else needs = content.needs.needs;\n    const needsSelector = needs.map((need, index) => React.createElement(\"label\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, need.amount !== 0 && sessionStorage.getItem('id') && React.createElement(\"input\", {\n      onChange: this.handleChange,\n      type: \"radio\",\n      name: \"donation\",\n      value: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'selection',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, need.name), need.amount !== 0 ? React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"(\", need.amount, \" para completar)\") : React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"(completo)\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, need.description)));\n    return this.state.error ? React.createElement(\"p\", {\n      className: 'error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, this.state.errorMessage) : this.state.loading ? React.createElement(\"p\", {\n      className: 'loading',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Loading data...\") : React.createElement(\"div\", {\n      className: 'content charity',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, content.name), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, content.field)), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, content.description), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'images',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, preview), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"Lista de nec.\"), this.state.donated && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: 'success',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, this.state.result), React.createElement(\"p\", {\n      className: 'loading',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Envie sua doa\\xE7\\xE3o para o seguinte endere\\xE7o: \", content.address)), this.state.errorDonation && React.createElement(\"p\", {\n      className: 'error',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, this.state.errorMessage), React.createElement(\"form\", {\n      name: \"donate\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, needsSelector, React.createElement(\"div\", {\n      className: 'inputs',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, this.state.donation && React.createElement(\"input\", {\n      type: \"number\",\n      name: \"amount\",\n      placeholder: \"Quantidade\",\n      min: \"1\",\n      max: needs[this.state.donation].amount,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), sessionStorage.getItem('id') && React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Enviar doa\\xE7\\xE3o\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Charity;","map":{"version":3,"sources":["/home/alex/Documents/usp/graduacao/terceiroSemestre/POO/Projeto/Client/charity-donation/src/pages/Charity.js"],"names":["React","Component","Connection","ResponseType","Charity","constructor","props","state","loading","content","errorMessage","error","donated","photos","query","bind","setContent","handleChange","handleSubmit","donationSuccessful","msg","id","match","params","type","CHARITY","socket","readyState","OPEN","send","JSON","stringify","setTimeout","setState","parse","donation","needs","amount","setError","message","result","donationFailed","errorDonation","insertImage","image","curr","concat","setupSocket","binaryType","onmessage","r","data","response","SUCCESS","FAIL","ArrayBuffer","Blob","componentDidMount","event","target","name","value","preventDefault","donate","reset","donor","sessionStorage","getItem","receiver","DONATE","render","preview","map","index","URL","createObjectURL","needsSelector","need","description","field","address"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Connection from '../connection/Connection'\nimport ResponseType from '../connection/ResponseType'\n\n/**\n * Componente do React criado utilizando classes para\n * que possa ter acesso a estados. Possui metodos para \n * renderizar e buscar dados no servidor.\n * O componente Charity representa uma pagina de uma\n * Instituição de Caridade.\n *\n * @class Charity\n * @extends {Component}\n */\nclass Charity extends Component {\n    /**\n     * Cria uma instancia de Charity, que é um JSX Component\n     * \n     * @param {*} props propriedades passadas para o objeto\n     * @memberof Charity\n     */\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loading: true,\n            content: {},\n            errorMessage: '',\n            error: false,\n            donated: false,\n            photos: []\n        }\n\n        this.query = this.query.bind(this)\n        this.setContent = this.setContent.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.donationSuccessful = this.donationSuccessful.bind(this)\n    }\n\n    /**\n     * Faz uma request para o servidor enviar os dados da Instituicao\n     * cuja página está sendo acessada.\n     *\n     * @memberof Charity\n     */\n    query() {\n        const msg = {\n            id: this.props.match.params.id, // onde fica o id que está na window.location\n            type: ResponseType.CHARITY\n        }\n\n        if (this.socket.readyState === this.socket.OPEN)\n            this.socket.send(JSON.stringify(msg))\n        else setTimeout(this.query, 10)\n    }\n\n    /**\n     * Muda o estado da pagina, guardando \n     * o conteudo pesquisado no servidor\n     *\n     * @param {Object} content objeto contendo os dados\n     * @memberof Charity\n     */\n    setContent(content) {\n        this.setState({\n            error: false,\n            loading: false,\n            content: JSON.parse(content)\n        })\n\n        if (this.state.donation && this.state.content.needs.needs[this.state.donation].amount === 0) {\n            this.setState({\n                donation: ''\n            })\n        }\n    }\n\n    /**\n     * Muda o estado da pagina para mostrar um erro ocorrido\n     * no carregamento da pagina\n     *\n     * @param {String} error mensagem de erro\n     * @memberof Charity\n     */\n    setError(error) {\n        this.setState({\n            errorMessage: error,\n            error: true\n        })\n    }\n\n    /**\n     * Muda o estado para mostrar o cadastro da doacao \n     * realizado com sucesso\n     *\n     * @param {String} message mensagem retornada pelo servidor\n     * @memberof Charity\n     */\n    donationSuccessful(message) {\n        this.setState({\n            donated: true,\n            result: message\n        })\n\n        this.query()\n    }\n\n    /**\n     * Muda o estado para mostrar o erro gerado ao tentar\n     * realizar uma doacao\n     *\n     * @param {String} message mensagem retornada pelo servidor\n     * @memberof Charity\n     */\n    donationFailed(message) {\n        this.setState({\n            errorDonation: true,\n            errorMessage: message\n        })\n    }\n\n    /**\n     * Insere uma imagem recebida do servidor no estado\n     * da pagino\n     *\n     * @param {Blob} image imagem recebida do servidor (Blob)\n     * @memberof Charity\n     */\n    insertImage(image) {\n        this.setState((curr) => ({\n            photos: curr.photos.concat([image])\n        }))\n    }\n\n    /**\n     * Realiza a configuracao do WebSocket (conexao Client-Server)\n     * para realizar a comunicacao e receber os dados \n     *\n     * @memberof Charity\n     */\n    setupSocket() {\n        this.socket = Connection\n\n        this.socket.binaryType = 'arraybuffer'\n\n        this.socket.onmessage = (r) => {\n            if (typeof r.data === 'string') {                    \n                const response = JSON.parse(r.data)\n                switch (response.type) {\n                    case ResponseType.SUCCESS:\n                        switch(response.id) {\n                            case -2: // -2 é id de charity\n                                this.setContent(response.message)\n                                break\n                            case -4: // -4 é id de donation\n                                this.donationSuccessful(response.message)\n                                break\n                            default:\n                        }\n                        break\n                    case ResponseType.FAIL:\n                        switch(response.id) {\n                            case -2: // -2 é id de charity\n                            this.setError(response.message)\n                                break\n                            case -4: // -4 é id de donation\n                                this.donationFailed(response.message)\n                                break\n                            default:\n                        }\n                        break\n                    default:\n                        this.setState({\n                            error: true,\n                            errorMessage: 'Erro: Indefinido.'\n                        })\n                }\n            } else if (r.data instanceof ArrayBuffer) {\n                const image = new Blob([r.data], {type: 'image/png'})\n                this.insertImage(image)\n            }\n        }        \n    }\n\n    /**\n     * Metodo built-in da classe Component que é\n     * chamado sempre que o componente é montado\n     *\n     * @memberof Charity\n     */\n    componentDidMount() {\n        this.setupSocket()\n        this.query()\n    }\n    \n    /**\n     * Utilizado para gerenciar as alteracoes nos \n     * formularios da pagina, guardando os valores no\n     * estado\n     *\n     * @param {*} event evento de mudanca no form\n     * @memberof Charity\n     */\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value,\n            errorDonation: false,\n            donated: false\n        })\n    }\n\n    /**\n     * Utilizado para gerenciar as submissoes dos \n     * formularios da pagina, tentando realizar a doacao\n     *\n     * @param {*} event evento de submissao no form\n     * @memberof Charity\n     */\n    handleSubmit(event) {\n        event.preventDefault()\n        if (!this.state.donation) {\n            this.setState({\n                        errorDonation: true,\n                        errorMessage: 'Erro. Precisa selecionar um item.'\n            })\n            return\n        }\n        if (!this.state.amount) {\n            this.setState({\n                errorDonation: true,\n                errorMessage: 'Erro. Precisa dizer a quantidade.'\n            })\n            return\n        }\n        this.donate()\n        \n        event.target.reset()\n    }\n\n    /**\n     * Realiza a comunicacao com o Servidor, tentando \n     * registrar uma nova doacao, do usuario logado, para \n     * a instituicao\n     *\n     * @memberof Charity\n     */\n    donate() {\n        if (this.socket.readyState !== this.socket.OPEN) \n            setTimeout(this.donate, 10)\n\n        const donation = {\n            donor: {\n                id: sessionStorage.getItem('id')\n            },\n            receiver: {\n                id: this.props.match.params.id\n            },\n            donation: {\n                id: this.state.content.needs.needs[this.state.donation].id\n            },\n            amount: this.state.amount\n        }\n\n        const msg = {\n            id: sessionStorage.getItem('type') === 'CHARITY' ? 1 : 0, //0 person, 1 charity\n            type: ResponseType.DONATE,\n            message: JSON.stringify(donation)\n        }\n\n        this.socket.send(JSON.stringify(msg))\n    }\n\n    /**\n     * Metodo built-in do component react que retorna o componente JSX\n     * a ser renderizado na tela.\n     * Possui os dados de uma Instituição, inclusive as imagens selecionadas\n     * e um formulario para submeter uma doacao.\n     *\n     * @returns JSX Component\n     * @memberof Charity\n     */\n    render() {\n        const { content, photos } = this.state\n        \n        const preview = photos.map((image, index) => \n            <div>\n                <img alt={'img'+index} src={URL.createObjectURL(image)} key={index}/>\n            </div>\n        )\n\n        let needs\n        if (!content.needs) needs = []\n        else if (!content.needs.needs) needs = []\n        else needs = content.needs.needs\n\n        const needsSelector = needs.map((need, index) => \n            <label key={index}>\n                {need.amount !== 0 && sessionStorage.getItem('id') &&\n                <input onChange={this.handleChange} type='radio' name='donation' value={index}></input>}\n                <div className={'selection'}></div>\n                <b>{need.name}</b> \n                {need.amount !== 0 ?\n                <i>({need.amount} para completar)</i> :\n                <i>(completo)</i>}\n                <p>{need.description}</p>\n            </label>\n        )\n\n        return (\n            this.state.error ?\n                <p className={'error'}>{this.state.errorMessage}</p> :\n            this.state.loading ?\n                <p className={'loading'}>Loading data...</p> :\n            <div className={'content charity'}>\n                <h2>{content.name}</h2>\n                <h4><i>{content.field}</i></h4>\n                <hr></hr>\n                <p>{content.description}</p>\n                <hr></hr>\n                <div className={'images'}>\n                    {preview}\n                </div>\n                <hr></hr>\n                <h3>Lista de nec.</h3>\n                {this.state.donated &&\n                <div>\n                    <p className={'success'}>{this.state.result}</p>\n                    <p className={'loading'}>Envie sua doação para o seguinte endereço: {content.address}</p>\n                </div>}\n                {this.state.errorDonation &&\n                <p className={'error'}>{this.state.errorMessage}</p>}\n                <form name='donate' onSubmit={this.handleSubmit}>\n                    {needsSelector}\n                    <div className={'inputs'}>\n                        {this.state.donation &&\n                        <input type='number' name='amount' placeholder='Quantidade' min='1' max={needs[this.state.donation].amount} onChange={this.handleChange}></input>}\n                        {sessionStorage.getItem('id') &&\n                        <input type='submit' value='Enviar doação'/>}\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Charity"]},"metadata":{},"sourceType":"module"}