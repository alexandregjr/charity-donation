{"version":3,"sources":["logo.svg","pages/components/Header.js","pages/components/Footer.js","pages/components/Needs.js","pages/Charity.js","pages/components/Donation.js","pages/Donations.js","pages/Login.js","pages/Register.js","pages/components/CharityInfo.js","connection/Connection.js","connection/ResponseType.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","react_router_dom","to","Footer","Needs","needs","data","list","map","need","index","key","name","amount","Charity","src","logo","alt","components_Needs","Donation","Donations","components_Donation","Login","type","placeholder","Register","CharityInfo","id","field","Connection","instance","WebSocket","ResponseType","CHARITIES","CHARITY","DONATE","DONATIONS_MADE","DONATIONS_RECEIVED","NEEDS","NEEDING","REGISTER_CHARITY","REGISTER_PERSON","VALIDATE_DONATION","DEBUG","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","content","query","bind","assertThisInitialized","setContent","msg","socket","readyState","OPEN","send","JSON","stringify","setTimeout","setState","error","parse","_this2","onmessage","r","response","message","setupSocket","infos","charity","components_CharityInfo","Component","App","components_Header","react_router","exact","path","component","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44279a53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nfunction Header(props) {\n    return (\n        <div>\n            <h1>Doacoes</h1>\n            <ul>\n                <li><Link to='/'>Home</Link></li>\n                <li><Link to='/donations'>Minhas Doações</Link></li>\n                <li><Link to='/'>Minhas Necessidades</Link></li>\n                <li><Link to='/login'>Entrar</Link></li>\n                <li><Link to='/register'>Registrar</Link></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\n\nfunction Footer(props) {\n    return (   \n        <div>\n            <p>Footer of page</p>\n        </div>\n    )\n}\n\nexport default Footer","import React from 'react'\n\nfunction Needs(props) {\n    let { needs } = props.data\n    if (!needs) needs = []\n\n    const list = needs.map((need, index) => \n        <li key={index}>{need.name} - {need.amount}</li>\n    )\n    \n    return (\n        <div>\n            <ul>\n                {list}\n            </ul>\n        </div>\n    )\n}\n\nexport default Needs","import React from 'react'\nimport logo from '../logo.svg'\nimport Needs from './components/Needs'\n\nfunction Charity(props) {\n    return (\n        <div>\n            <h1>Nome ch.</h1>\n            <h2>Area de atuacao</h2>\n            <p>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n                Quisque aliquam arcu non leo vulputate ullamcorper. \n                Ut euismod porttitor velit id porta. Vestibulum dictum \n                nisl id felis tincidunt, in lobortis nibh varius. In in \n                cursus diam. Donec metus metus, euismod vel enim nec, pulvinar dictum mi. \n                Mauris rutrum sagittis nunc at semper. Proin a neque placerat, elementum \n                nulla id, finibus dui. Phasellus placerat eros nisi, nec dapibus dolor \n                iaculis sit amet. Pellentesque finibus quam a interdum maximus. \n            </p>\n\n            <img src={logo} alt='logo from charity'></img>\n\n            <h2>Lista de nec.</h2>\n            <Needs data=\"\"/>\n        </div>\n    )\n}\n\nexport default Charity","import React from 'react'\n\nfunction Donation(props) {\n    return (\n        <div>\n            <p>Donation</p>\n        </div>\n    )\n}\n\nexport default Donation\n\n\n","import React from 'react'\nimport Donation from './components/Donation'\n\nfunction Donations(props) {\n    return (\n        <div>\n            <Donation />\n            <Donation />\n            <Donation />\n            <Donation />\n        </div>\n    )\n}\n\nexport default Donations","import React from 'react'\n\nfunction Login(props) {\n    return (\n        <div>\n            <h2>Logar</h2>\n            <input type='text' placeholder='email'></input>\n            <input type='password' placeholder='senha'></input>\n            <button>Login</button>\n        </div>\n    )\n}\n\nexport default Login","import React from 'react'\n\nfunction Register(props) {\n    return (\n        <div>\n            <h2>Registrar</h2>\n            <input type='text' placeholder='nome'></input>\n            <input type='text' placeholder='email'></input>\n            <input type='password' placeholder='senha'></input>\n            <button>Registrar</button>\n        </div>\n    )\n}\n\nexport default Register","import React from 'react'\nimport logo from '../../logo.svg'\nimport Needs from './Needs';\nimport {Link} from 'react-router-dom'\n\nfunction CharityInfo(props) {\n\n    return (\n        <div>\n            <p><b>{props.data.name}</b> #{props.data.id}</p>\n            <p><i>{props.data.field}</i></p>\n            <p><b>Necessidades</b></p>\n            <Needs data={props.data.needs}/>\n            <Link to={'/charity/' + props.data.id}>\n                Ver detalhes\n            </Link>\n            <img src={logo} alt='logo from charity'></img>\n        </div>\n    )\n}\n\nexport default CharityInfo","\n\nconst Connection = (() => {\n    let instance\n\n    return (\n        !instance ? \n        instance = new WebSocket(\"ws://localhost:9000\") : \n        instance\n    ) \n})()\n\nexport default Connection\n  \n// this.socket.onmessage = (r) => {\n//     const response = JSON.parse(r.data);\n//     switch (response.type) {\n//         case ResponseType.CHARITIES:\n//             // call function to read charities\n//             break;\n//         case ResponseType.CHARITY:\n//             // call function to read charity\n//             break;\n//         case ResponseType.DONATE:\n//             // call function to display donation status\n//             break;\n//         case ResponseType.DONATIONS_MADE:\n//             // call function to read donations of user\n//             break;\n//         case ResponseType.DONATIONS_RECEIVED:\n//             // call function to read donations to charity\n//             break;\n//         case ResponseType.NEEDING:\n//             // call function to display needs status\n//             break;\n//         case ResponseType.NEEDS:\n//             // call function to read needs of charity\n//             break;\n//         case ResponseType.REGISTER_CHARITY:\n//             // call function to display registration status\n//             break;\n//         case ResponseType.REGISTER_PERSON:\n//             // call function to display registration status\n//             break;\n//         case ResponseType.VALIDATE_DONATION:\n//             // call function to display validation status\n//             break;\n//         case ResponseType.DEBUG:\n//             this.setState({\n//                 loaded: true,\n//                 id: response.id,\n//                 message: response.message\n//             });\n//             break;\n//         default:\n//     }\n// };\n// this.socket.onopen = () => {\n//     this.login();\n// };\n// this.socket.onclose = () => {\n// };\n// this.socket.onerror = () => {\n// };","export default class ResponseType {\n    static CHARITIES = 'CHARITIES'\n    static CHARITY = 'CHARITY'\n    static DONATE = 'DONATE'\n    static DONATIONS_MADE = 'DONATIONS_MADE'\n    static DONATIONS_RECEIVED = 'DONATIONS_RECEIVED'\n    static NEEDS = 'NEEDS'\n    static NEEDING = 'NEEDING'\n    static REGISTER_CHARITY = 'REGISTER_CHARITY'\n    static REGISTER_PERSON = 'REGISTER_PERSON'\n    static VALIDATE_DONATION = 'VALIDATE_DONATION'\n    static DEBUG = 'DEBUG'\n}","import React, {Component} from 'react'\nimport CharityInfo from './components/CharityInfo'\nimport Connection from '../connection/Connection'\nimport ResponseType from '../connection/ResponseType'\n\nclass Main extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            loading: true,\n            content: []\n        }\n\n        this.query = this.query.bind(this)\n        this.setContent = this.setContent.bind(this)\n    }\n\n    query() {\n        const msg = {type: ResponseType.CHARITIES}\n\n        if (this.socket.readyState === this.socket.OPEN)\n            this.socket.send(JSON.stringify(msg))\n        else setTimeout(this.query, 10)\n    }\n\n    setContent(content) {\n        this.setState({\n            error: false,\n            loading: false,\n            content: JSON.parse(content)\n        })\n    }\n\n    setupSocket() {\n        this.socket = Connection\n\n        this.socket.onmessage = (r) => {\n            const response = JSON.parse(r.data)\n            switch (response.type) {\n                case ResponseType.CHARITIES:\n                    this.setContent(response.message)\n                    break\n                default:\n                    this.setState({\n                        error: true\n                    })\n            }\n        }        \n    }\n\n    componentDidMount() {\n        this.setupSocket()\n        this.query()\n    }\n\n    render() {\n        const infos = this.state.content.map(\n            (charity, index) => <CharityInfo key={index} data={charity} />\n        )\n\n        return (\n            <div>\n                <input type='text' placeholder='pesquisar'></input>\n                {   \n                    this.state.error ?\n                    <p>error</p> :\n                        this.state.loading ? \n                        <p>loading...</p> :                 \n                        <div>\n                            {infos}\n                        </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Main","import React, {Component} from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Header from './pages/components/Header'\nimport Footer from './pages/components/Footer'\nimport Charity from './pages/Charity'\nimport Donations from './pages/Donations'\nimport Login from './pages/Login'\nimport Register from './pages/Register'\nimport Main from './pages/Main'\nimport Connection from './connection/Connection'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.socket = Connection\n  }\n\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Header />\n          <Switch>\n            <Route exact path='/' component={Main}/>\n            <Route exact path='/charity/:id' component={Charity}/>\n            <Route exact path='/register' component={Register}/>\n            <Route exact path='/login' component={Login}/>\n            <Route exact path='/donations' component={Donations}/>\n            <Route exact path='/Login' component={Login}/>\n          </Switch>\n          <Footer />\n        </BrowserRouter>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}